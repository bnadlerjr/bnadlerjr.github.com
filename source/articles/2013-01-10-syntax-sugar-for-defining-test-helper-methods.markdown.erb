---
title: "Syntax Sugar for Defining Test Helper Methods"
date: 2013-01-10
description: "How to define a Ruby Test::Unit helper method that acts similar to RSpec#let."
---
<%= partial "article_image", locals: {
  filename: "sugar-loops.jpg",
  alt: "Sugar Loops",
  source: "Vox Efx",
  url: "http://www.flickr.com/photos/vox_efx/2912195591/"
} %>

I prefer Ruby's <code>Test::Unit</code> over RSpec, but one of the things I like about RSpec is the [let method](https://www.relishapp.com/rspec/rspec-core/v/2-6/docs/helper-methods/let-and-let).  It allows you to create memoized helper methods in your tests. When I use Test::Unit, I usually mimic this behavior using a private helper method. Today I decided to see if I could write my own <code>let</code> method that could be used with <code>Test::Unit</code>. 

Here's what I came up with:

```ruby
class Test::Unit::TestCase
  def self.let(name, &block)
    ivar = "@#{name}"
    self.class_eval do
      define_method(name) do
        if instance_variable_defined?(ivar)
          instance_variable_get(ivar)
        else
          value = self.instance_eval(&block)
          instance_variable_set(ivar, value)
        end
      end
    end
  end
end
```

Now instead of writing helper methods in your tests like this...

```ruby
class EmployeeTest < Test::Unit::TestCase
  def test_employee_has_an_email
    assert_equal('jdoe@example.com', employee.email)
  end

  private

  def employee
    @employee ||= Employee.new('jdoe@example.com')
  end
end
```
You can use "let" like this...

```ruby
class EmployeeTest < Test::Unit::TestCase
  let(:employee) { Employee.new('jdoe@example.com') }

  def test_employee_has_an_email
    assert_equal('jdoe@example.com', employee.email)
  end
end
```
