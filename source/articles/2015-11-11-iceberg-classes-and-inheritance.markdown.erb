---
id: 6a943e84-0b9c-43be-8f58-71d6c82a516e
title: Iceberg Classes and Inheritance
date: 2015-11-11
description: "Are Iceberg classes that rely on inheritance a code smell?"
image: "iceberg.jpg"
alt: "Iceberg"
source: "Drew Avery"
url: "https://flic.kr/p/9dT8mB"
---
[Better](http://www.artima.com/weblogs/viewpost.jsp?thread=125574) [developers](https://blog.pivotal.io/labs/labs/write-private-functions-not-private-methods) than I have written about iceberg classes and why they are a code smell. I’d like to talk about a specific kind of iceberg class I’ve recently come across. This type involves inheritance. Here’s an example of what I mean.

```ruby
class Job
  def perform
    # do some setup
    execute
    # do some cleanup
  end

  private

  def execute
    raise NotImplementedError
  end
end

class SomeJob
  private

  def execute
    # do some stuff
  end
end

class AnotherJob
  private

  def execute
    # do other stuff
  end
end
```

My gut reaction to this code is that there is a design smell here. I’m wondering if my reaction is not because of the “iceberg” nature of the subclasses, but because of the use of inheritance. I’m curious what others think and if you agree that there is a problem with the code.
